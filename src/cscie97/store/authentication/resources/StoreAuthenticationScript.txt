# create-ledger <name> description <description> seed <seed>
create-ledger test description “test ledger 2020” seed “harvard”
# create-account <account-id>
create-account mary
create-account bob
create-account bill
create-account frank
create-account jane
# get-account-balance <account-id>
# expect error since not committed to a block
# get-account-balance mary
# process-transaction <transaction-id> amount <amount> fee <fee> note <note>
# payer <account-address> receiver <account-address>
process-transaction 1 amount 1000 fee 10 note “fund account” payer master receiver mary
process-transaction 2 amount 1000 fee 10 note “fund account” payer master receiver bob
process-transaction 3 amount 1000 fee 10 note “fund account” payer master receiver bill
process-transaction 4 amount 1000 fee 10 note “fund account” payer master receiver frank
process-transaction 5 amount 1000 fee 10 note “fund account” payer master receiver mary
# expect error since the account mary has not been committed to a block
# get-account-balance mary
# should not show any account balances since no block has been committed
get-account-balances
process-transaction 6 amount 1000 fee 10 note “fund account” payer master receiver bob
process-transaction 7 amount 1000 fee 10 note “fund account” payer master receiver bill
process-transaction 8 amount 1000 fee 10 note “fund account” payer master receiver frank
process-transaction 9 amount 1000 fee 10 note “fund account” payer master receiver mary
process-transaction 10 amount 1000 fee 10 note “fund account” payer master receiver bob
# expect balance of 3000 for mary
get-account-balance mary
# expect balance of 3000 for bob
get-account-balance bob
# expect balance of 2000 for bill
get-account-balance bill
# expect balance of 2000 for frank
get-account-balance frank
# expect balance of 0 for jane
get-account-balance jane
# show the details of block #1
get-block 1
#show the details of transaction 10
get-transaction 10
process-transaction 11 amount 200 fee 10 note “september rent” payer frank receiver jane
# expect balance of 2000 for frank
get-account-balance frank
# expect balance of 0 for jane
get-account-balance jane
process-transaction 12 amount 20 fee 10 note “uber” payer bob receiver mary
process-transaction 13 amount 20 fee 10 note “uber” payer bob receiver mary
process-transaction 14 amount 20 fee 10 note “uber” payer bob receiver mary
process-transaction 15 amount 20 fee 10 note “uber” payer bob receiver mary
process-transaction 16 amount 20 fee 10 note “uber” payer bob receiver mary
process-transaction 17 amount 20 fee 10 note “uber” payer bob receiver mary
process-transaction 18 amount 20 fee 10 note “uber” payer bob receiver mary
process-transaction 19 amount 20 fee 10 note “uber” payer bob receiver mary
process-transaction 20 amount 20 fee 10 note “uber” payer bob receiver mary
# expect balance of 200 for jane
get-account-balance jane
# expect balance of 2000 - 200 - 10 => 1790
get-account-balance frank
# expect balance of 3000 + 180 => 3180
get-account-balance mary
# expect balance of 3000 - 180 - 90 => 2730
get-account-balance bob
# show all account balances for master, mary, bob, bill, frank, and jane
get-account-balances
# this transaction should fail since it exceeds the account balance for “bob”.
# process-transaction 21 amount 5000 fee 10 note “food” payer bob receiver mary
# this transaction should fail since the minimum fee is not provided
process-transaction 22 amount 20 fee 5 note “food” payer bob receiver mary
################### AUTHENTICATION COMMANDS START ###################
login admin
create_user, sam, “Sam Davis”
create_user, jimmy, “Jimmy Jones”
create_user, debra, “Debra Smart”
add_user_credential sam, voice_print, --voice:sam--
add_user_credential jimmy, face_print, --face:jimmy--
add_user_credential debra, password, secret
define_role, adult_consumer,“Adult Consumer Role”, “Has all permissions of an adult consumer”
define_role, child_consumer,“Child Consumer Role”, “Has all permissions of a child consumer”
define_role, guest,“Guest Role”, “Has all permissions of a guest”
define_role, admin_role,“Admin Role”, “Has all permissions of an administrator”
define_permission, user_admin, “User Administrator”, “Create, Update, Delete Users”
define_permission, control_robot, “Control Robot”, “Full Control of Robots”
define_permission, control_speaker, “Control Speaker”, “Full Control of Speaker”
define_permission, control_turnstile, “Control Turnstile”, “Full Control of Turnstile”
# add_permission_to_role, <role_id>, <permission_id>
add_permission_to_role, admin_role, user_admin
add_permission_to_role, admin_role, control_robot
add_permission_to_role, admin_role, control_speaker
add_permission_to_role, admin_role, control_turnstile
add_permission_to_role, adult_consumer, control_robot
add_permission_to_role, adult_consumer, enter_store
add_permission_to_role, adult_consumer, checkout
add_permission_to_role, child_consumer, enter_store
add_permission_to_role, child_consumer, checkout
add_permission_to_role, guest, enter_store
# add_role_to_user <user_id>, <role>
add_role_to_user debra, admin_role
# create_resource_role <resource_role_name>, <role>, <resource>
create_resource_role store1_child_consumer,  child_consumer, store1
create_resource_role store1_adult_consumer, adult_consumer, store1
# add_resource_role_to_user <user_id>, <resource_role>
add_resource_role_to_user sam, store1_adult_consumer
add_resource_role_to_user jimmy, store1_child_consumer
check inventory
################### AUTHENTICATION COMMANDS ENDS ###################
# validate the state of the blockchain
validate
# Store Model Service Sample Script
# Store Commands
# define store  <identifier> name <name> address <address>
define store  store_123 name "Eataly" address "808 Boylston St, Boston, MA 02199"
# show store  <identifier>
show store  store_123
#Aisle Commands
# Define an aisle within the store
# define aisle  <store_id>:<aisle_number>  name  <name>  description  <description>
# location  (floor  |  store_room)
define aisle  store_123:aisle_A1  name  AISLE_A1  description  "aisle a1 description" location  store_room
define aisle  store_123:aisle_A2  name  AISLE_A2  description  "aisle a2 description" location  floor
define aisle  store_123:aisle_A3  name  AISLE_A3  description  "aisle a3 description" location  floor
define aisle  store_123:aisle_B1  name  AISLE_B1  description  "aisle b1 description" location  store_room
define aisle  store_123:aisle_B2  name  AISLE_B2  description  "aisle b2 description" location  floor
define aisle  store_123:aisle_B3  name  AISLE_B3  description  "aisle b3 description" location  floor
#Show the details of the aisle, including the name, description, and list of shelves.
#show  aisle  <store_id>[:<aisle_number>]
show aisle store_123:aisle_A1
show aisle store_123:aisle_A2
show aisle store_123:aisle_B2
#Shelf Commands
# Define a new shelf within the store
# define  shelf  <store_id>:<aisle_number>:<shelf_id>  name  <name>  level  (high  |
#medium  |  low)  description  <description>  [temperature  (frozen  |  refrigerated  |
#ambient  |  warm  |  hot  )]
define shelf store_123:aisle_A1:shelf_q1  name  Shelf_Q1  level  high  description "shelf q1 description" temperature  frozen
define shelf store_123:aisle_A1:shelf_q2  name  Shelf_Q2  level  medium  description "shelf q2 description"  temperature  ambient
define shelf store_123:aisle_A1:shelf_q3  name  Shelf_Q3  level  low  description "shelf q3 description"  temperature  refrigerated
define shelf store_123:aisle_A1:shelf_q4  name  Shelf_Q4  level  low  description "shelf q4 description"  temperature  warm
define shelf store_123:aisle_A1:shelf_q5  name  Shelf_Q5  level  medium  description "shelf q5 description"  temperature  hot
define shelf store_123:aisle_A2:shelf_q1  name  Shelf_Q1  level  high  description "Shelf q1 description"  temperature  frozen
define shelf store_123:aisle_A2:shelf_q2  name  Shelf_Q2  level  medium  description "shelf q2 description"  temperature  ambient
define shelf store_123:aisle_A2:shelf_q3  name  Shelf_Q3  level  low  description "shelf q3 description"  temperature  refrigerated
define shelf store_123:aisle_A2:shelf_q4  name  Shelf_Q4  level  low  description "shelf q4 description"  temperature  warm
define shelf store_123:aisle_A2:shelf_q5  name  Shelf_Q5  level  medium  description "shelf q5 description"  temperature  hot
define shelf store_123:aisle_A3:shelf_q1  name  Shelf_Q1  level  high  description "Shelf q1 description"  temperature  frozen
define shelf store_123:aisle_A3:shelf_q2  name  Shelf_Q2  level  medium  description "shelf q2 description"  temperature  ambient
define shelf store_123:aisle_A3:shelf_q3  name  Shelf_Q3  level  low  description "shelf q3 description"  temperature  refrigerated
define shelf store_123:aisle_A3:shelf_q4  name  Shelf_Q4  level  low  description "shelf q4 description"  temperature  warm
define shelf store_123:aisle_A3:shelf_q5  name  Shelf_Q5  level  medium  description "shelf q5 description"  temperature  hot
define shelf store_123:aisle_B1:shelf_q1  name  Shelf_Q1  level  high  description "Shelf q1 description"  temperature  frozen
define shelf store_123:aisle_B1:shelf_q2  name  Shelf_Q2  level  medium  description "shelf q2 description"  temperature  ambient
define shelf store_123:aisle_B1:shelf_q3  name  Shelf_Q3  level  low  description "shelf q3 description"  temperature  refrigerated
define shelf store_123:aisle_B1:shelf_q4  name  Shelf_Q4  level  low  description "shelf q4 description"  temperature  warm
define shelf store_123:aisle_B1:shelf_q5  name  Shelf_Q5  level  medium  description "shelf q5 description"  temperature  hot
define shelf store_123:aisle_B2:shelf_q1  name  Shelf_Q1  level  high  description "Shelf q1 description"  temperature  frozen
define shelf store_123:aisle_B2:shelf_q2  name  Shelf_Q2  level  medium  description "shelf q2 description"  temperature  ambient
define shelf store_123:aisle_B2:shelf_q3  name  Shelf_Q3  level  low  description "shelf q3 description"  temperature  refrigerated
define shelf store_123:aisle_B2:shelf_q4  name  Shelf_Q4  level  low   description "shelf q4 description"  temperature  warm
define shelf store_123:aisle_B2:shelf_q5  name  Shelf_Q5  level  medium   description "shelf q5 description"  temperature  hot
define shelf store_123:aisle_B3:shelf_q1  name  Shelf_Q1  level  high  description "Shelf q1 description"  temperature  frozen
define shelf store_123:aisle_B3:shelf_q2  name  Shelf_Q2  level  medium  description "shelf q2 description"  temperature  ambient
define shelf store_123:aisle_B3:shelf_q3  name  Shelf_Q3  level  low   description "shelf q3 description"  temperature  refrigerated
define shelf store_123:aisle_B3:shelf_q4  name  Shelf_Q4  level  low   description "shelf q4 description"  temperature  warm
define shelf store_123:aisle_B3:shelf_q5  name  Shelf_Q5  level  medium  description "shelf q5 description"  temperature  hot
# Show the details of the shelf including id, name, level, description, and temperature
# show  shelf  <store_id>[:<aisle_number>[:<shelf_id>]]
show shelf store_123:aisle_A2:shelf_q1
show shelf store_123:aisle_B1:shelf_q5
# Product Commands
# Define a new product
# define  product  <product_id>        name  <name>  description  <description>  size
# <size>  category  <category>  unit_price  <unit_price>        [temperature  (frozen  |
# refrigerated  |  ambient  |  warm  |  hot  )]
define product  prod10 name  bournvita  description  bournvita  size 250g  category Food  unit_price  2 temperature  ambient
define product  prod11 name  tea  description  green_tea  size 500g  category Food  unit_price  1 temperature  ambient
define product  prod12 name  coffee  description  coffee  size 100g  category  Food unit_price  3 temperature refrigerated
define product  prod13 name  goggles  description  spectacles  size 3  category Men_accessories  unit_price  5 temperature  ambient
define product  prod14 name  sun_glass  description  spectacles  size 3  category Fashion  unit_price  7  temperature  ambient
# Show the details of the product
# show  product  <product_id>
show product prod10
#Inventory Commands
# Define a new inventory item within the store
# define  inventory  <inventory_id>  location  <store_id>:<aisle_number>:<shelf_id>
#capacity  <capacity>  count  <count>  product  <product_id>
define inventory  inv_u21  location  store_123:aisle_A1:shelf_q1 capacity  1500  count 1000  product  prod10
define inventory  inv_u22  location  store_123:aisle_A1:shelf_q2 capacity  1500  count 1000  product  prod11
define inventory  inv_u23  location  store_123:aisle_B2:shelf_q1 capacity  500  count 200  product  prod11
define inventory  inv_u24  location  store_123:aisle_B2:shelf_q2 capacity  500  count 200  product  prod10
define inventory  inv_u25  location  store_123:aisle_A2:shelf_q1 capacity  200  count 100  product  prod10
define inventory  inv_u26  location  store_123:aisle_A2:shelf_q3 capacity  300  count 100  product  prod12
# Show the details of the inventory
# show  inventory  <inventory_id>
show inventory inv_u24
show inventory inv_u21
# Update the inventory count, count must >= 0 and <= capacity
# update  inventory  <inventory_id>  update_count  <increment  or  decrement>
update inventory  inv_u24  update_count  4
update inventory  inv_u21  update_count  7
#Customer Commands
# Define a new customer
# define  customer  <customer_id>        first_name  <first_name>  last_name
#<last_name> type  (registered|guest)  email_address  <email>  account
#<account_address>
define customer  cust_AB  first_name  JSON  last_name  WALLACE type  guest email_address  json.wallace@ymail.com  account  json
define customer cust_21   first_name  BILL  last_name  ROSE type  registered email_address  bill.rose@gmail.com  account  bill
define customer  cust_22  first_name  MARY last_name  KELVIN type  registered email_address  mary.kevin@yahoomail.com  account  mary
define customer  cust_E2 first_name  SILVER  last_name  HAWK type  guest email_address  silver.hawk@rocketmail.com  account  silver
define customer  cust_23        first_name  MEGON  last_name  FOX type  guest email_address  megonfox@testmail.com  account  megon
define customer  cust_24        first_name  MARIA last_name  WILIAMSON type registered  email_address  maria4567@ymail.com  account  maria
define customer  cust_S2        first_name  SALINA  last_name  GOMEZ type registered  email_address  salina@gmail.com  account  salina
# Update the location of a customer
# update  customer  <customer_id>  location  <store:aisle>
update customer  cust_S2  location  store_123:aisle_B2
update customer  cust_21  location  store_123:aisle_A2
update customer  cust_22  location  store_123:aisle_A2
# Show the details of the customer
# show  customer  <customer_id>
show customer cust_21
show customer cust_S2
# Basket Commands
#define basket <basket_id>
define basket b1
define basket b2
define basket b3
define basket b4
define basket b5
# Associate basket with Customer
#assign basket <basket_id> customer  <customer_id>
assign basket b1 customer  cust_21
assign basket b2 customer  cust_S2
assign basket b3 customer  cust_22
# Get basket_id associated with the customer, create new basket if the customer does
# not already have a basket associated.
# get_customer_basket  <customer_id>
get_customer_basket  cust_21
get_customer_basket  cust_S2
get_customer_basket  cust_22
# Add a product item to a basket
# add_basket_item  <basket_id>  product  <product_id>  item_count  <count>
add_basket_item  b1  product  prod10  item_count  4
add_basket_item  b3  product  prod11  item_count  2
add_basket_item  b3  product  prod12  item_count  7
# Remove a product item from a basket
# remove_basket_item  <basket_id>  product  <product_id>  item_count  <count>
remove_basket_item  b1  product  prod10  item_count  1
remove_basket_item  b3  product  prod12  item_count  5
# Clear the contents of the basket and remove the customer association
# clear_basket  <basket_id>
clear_basket  b3
# Get the list of product items in the basket, include the product_id and count
# Show  basket_items  <basket_id>
Show basket_items  b3 
# it is empty
Show basket_items  b1
Show basket_items  b5 
#it is not assigned yet
#Sensor Commands
# Define device of type sensor
# define  device  <device_id>  name  <name>  type  (microphone|camera)  location <store>:<aisle>
define device  mic_A1  name  MicrophoneA1  type  microphone  location store_123:aisle_A2
define device  cam_A1  name  CameraA1  type  camera  location store_123:aisle_A2
define device  cam_A2  name  CameraA2  type  camera  location store_123:aisle_A1
define device  cam_B2  name  CameraB1  type  camera  location store_123:aisle_B2
# Show device details
# show  device  <device_id>
show device cam_A1
show device mic_A1
show device cam_A2
# Create a sensor event, this simulates a sensor event
# create_event  <device_id>  event  <event>
create_event  cam_A1  event  watch_store_room
create_event  mic_A1  event  tell_robot_to_bring_items_from_store_123:aisle_A1
#Appliance Commands
# Define device of type appliance
# define  device  <device_id>  name  <name>  type  (speaker  |  robot  |  turnstile) location  <store>:<aisle>
define device  rob_1  name  ROBOT_1  type  robot location  store_123:aisle_A1
define device  rob_2  name  ROBOT_2  type  robot location  store_123:aisle_A2
define device  spk_1  name  SPEAKER_1  type  speaker location  store_123:aisle_A1
define device  spk_2  name  SPEAKER_2  type  speaker location  store_123:aisle_A2
define device  turn_a1  name  TURNSTILE_A1  type  turnstile location store_123:aisle_A2
define device  turn_a2  name  TURNSTILE_A2  type  turnstile location store_123:aisle_A2
define device  turn_a3  name  TURNSTILE_A3  type  turnstile location store_123:aisle_A2
# Show appliance device details
show device  turn_a1
show device  rob_2
# Create an appliance event, this simulates a sensor event
# create  event  <device_id>  event  <event_description>
event Emergency type fire location aisle_A2
event Customer Basket customer frank action add product prod10 location store_123:aisle_A1:shelf_q1 
event BrokenGlass location aisle_A3
event Cleaning product prod10 location aisle_A2
event MissingPerson Customer cust_21
event CustomerSeen location aisle_A1 imagepath customer/photo
event FetchProduct customer cust_S2 product prod11 count 1
event CheckAccountBalance customer cust_21
event AssistCustomer customer cust_22
event Checkout customer cust_21
event EnterStore customer cust_24 turnstile turn_a1